<?xml version="1.0"?><OWASPZAPReport version="D-2019-08-27" generated="Thu, 29 Aug 2019 22:11:33">
<site name="https://ia-case-api-aat.service.core-compute-aat.internal" host="ia-case-api-aat.service.core-compute-aat.internal" port="443" ssl="true">
<alerts>
<alertitem>
  <pluginid>100000</pluginid>
  <alert>A Client Error response code was returned by the server</alert>
  <name>A Client Error response code was returned by the server</name>
  <riskcode>0</riskcode>
  <confidence>3</confidence>
  <riskdesc>Informational (High)</riskdesc>
  <desc>&lt;p&gt;A response code of 403 was returned by the server.&lt;/p&gt;&lt;p&gt;This may indicate that the application is failing to handle unexpected input correctly.&lt;/p&gt;&lt;p&gt;Raised by the &apos;Alert on HTTP Response Code Error&apos; script&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://ia-case-api-aat.service.core-compute-aat.internal/asylum/ccdSubmitted</uri>
  <method>POST</method>
  <evidence>HTTP/1.1 403</evidence>
  </instance>
  <instance>
  <uri>https://ia-case-api-aat.service.core-compute-aat.internal/asylum/ccdAboutToSubmit</uri>
  <method>POST</method>
  <evidence>HTTP/1.1 403</evidence>
  </instance>
  <instance>
  <uri>https://ia-case-api-aat.service.core-compute-aat.internal/asylum/ccdAboutToStart</uri>
  <method>POST</method>
  <evidence>HTTP/1.1 403</evidence>
  </instance>
  </instances>
  <count>3</count>
  <solution>&lt;p&gt;&lt;/p&gt;</solution>
  <reference>&lt;p&gt;&lt;/p&gt;</reference>
  <cweid>388</cweid>
  <wascid>20</wascid>
  <sourceid>4</sourceid>
</alertitem>
<alertitem>
   <pluginid>10021</pluginid>
   <alert>X-Content-Type-Options Header Missing</alert>
   <name>X-Content-Type-Options Header Missing</name>
   <riskcode>1</riskcode>
   <confidence>2</confidence>
   <riskdesc>Low (Medium)</riskdesc>
   <desc>&lt;p&gt;The Anti-MIME-Sniffing header X-Content-Type-Options was not set to &apos;nosniff&apos;. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.&lt;/p&gt;</desc>
   <instances>
   <instance>
   <uri>https://ia-case-api-aat.service.core-compute-aat.internal/v2/api-docs</uri>
   <method>GET</method>
   <param>X-Content-Type-Options</param>
   </instance>
   <instance>
   <uri>https://ia-case-api-aat.service.core-compute-aat.internal/</uri>
   <method>GET</method>
   <param>X-Content-Type-Options</param>
   </instance>
   </instances>
   <count>2</count>
   <solution>&lt;p&gt;Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to &apos;nosniff&apos; for all web pages.&lt;/p&gt;&lt;p&gt;If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.&lt;/p&gt;</solution>
   <otherinfo>&lt;p&gt;This issue still applies to error type pages (401, 403, 500, etc) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.&lt;/p&gt;&lt;p&gt;At &quot;High&quot; threshold this scanner will not alert on client or server error responses.&lt;/p&gt;</otherinfo>
   <reference>&lt;p&gt;http://msdn.microsoft.com/en-us/library/ie/gg622941%28v=vs.85%29.aspx&lt;/p&gt;&lt;p&gt;https://www.owasp.org/index.php/List_of_useful_HTTP_headers&lt;/p&gt;</reference>
   <cweid>16</cweid>
   <wascid>15</wascid>
   <sourceid>3</sourceid>
 </alertitem>
<alertitem>
   <pluginid>10037</pluginid>
   <alert>Server Leaks Information via &quot;X-Powered-By&quot; HTTP Response Header Field(s)</alert>
   <name>Server Leaks Information via &quot;X-Powered-By&quot; HTTP Response Header Field(s)</name>
   <riskcode>1</riskcode>
   <confidence>2</confidence>
   <riskdesc>Low (Medium)</riskdesc>
   <desc>&lt;p&gt;The web/application server is leaking information via one or more &quot;X-Powered-By&quot; HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.&lt;/p&gt;</desc>
   <instances>
   <instance>
   <uri>https://ia-case-api-aat.service.core-compute-aat.internal/asylum/ccdSubmitted</uri>
   <method>POST</method>
   <evidence>X-Powered-By: ASP.NET</evidence>
   </instance>
   <instance>
   <uri>https://ia-case-api-aat.service.core-compute-aat.internal/</uri>
   <method>GET</method>
   <evidence>X-Powered-By: ASP.NET</evidence>
   </instance>
   <instance>
   <uri>https://ia-case-api-aat.service.core-compute-aat.internal/v2/api-docs</uri>
   <method>GET</method>
   <evidence>X-Powered-By: ASP.NET</evidence>
   </instance>
   <instance>
   <uri>https://ia-case-api-aat.service.core-compute-aat.internal/asylum/ccdAboutToStart</uri>
   <method>POST</method>
   <evidence>X-Powered-By: ASP.NET</evidence>
   </instance>
   <instance>
   <uri>https://ia-case-api-aat.service.core-compute-aat.internal/asylum/ccdAboutToSubmit</uri>
   <method>POST</method>
   <evidence>X-Powered-By: ASP.NET</evidence>
   </instance>
   </instances>
   <count>5</count>
   <solution>&lt;p&gt;Ensure that your web server, application server, load balancer, etc. is configured to suppress &quot;X-Powered-By&quot; headers.&lt;/p&gt;</solution>
   <reference>&lt;p&gt;http://blogs.msdn.com/b/varunm/archive/2013/04/23/remove-unwanted-http-response-headers.aspx&lt;/p&gt;&lt;p&gt;http://www.troyhunt.com/2012/02/shhh-dont-let-your-response-headers.html&lt;/p&gt;</reference>
   <cweid>200</cweid>
   <wascid>13</wascid>
   <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>10015</pluginid>
  <alert>Incomplete or No Cache-control and Pragma HTTP Header Set</alert>
  <name>Incomplete or No Cache-control and Pragma HTTP Header Set</name>
  <riskcode>1</riskcode>
  <confidence>2</confidence>
  <riskdesc>Low (Medium)</riskdesc>
  <desc>&lt;p&gt;The cache-control and pragma HTTP header have not been set properly or are missing allowing the browser and proxies to cache content.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://ia-case-api-aat.service.core-compute-aat.internal/</uri>
  <method>GET</method>
  <param>Cache-Control</param>
  <evidence>no-cache</evidence>
  </instance>
  <instance>
  <uri>https://ia-case-api-aat.service.core-compute-aat.internal/v2/api-docs</uri>
  <method>GET</method>
  <param>Cache-Control</param>
  </instance>
  </instances>
  <count>2</count>
  <solution>&lt;p&gt;Whenever possible ensure the cache-control HTTP header is set with no-cache, no-store, must-revalidate; and that the pragma HTTP header is set with no-cache.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Web_Content_Caching&lt;/p&gt;</reference>
  <cweid>525</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
  <pluginid>90022</pluginid>
  <alert>Application Error Disclosure</alert>
  <name>Application Error Disclosure</name>
  <riskcode>2</riskcode>
  <confidence>2</confidence>
  <riskdesc>Medium (Medium)</riskdesc>
  <desc>&lt;p&gt;This page contains an error/warning message that may disclose sensitive information like the location of the file that produced the unhandled exception. This information can be used to launch further attacks against the web application. The alert could be a false positive if the error message is found inside a documentation page.&lt;/p&gt;</desc>
  <instances>
  <instance>
  <uri>https://ia-case-api-aat.service.core-compute-aat.internal/v2/api-docs</uri>
  <method>GET</method>
  <evidence>Internal Server Error</evidence>
  </instance>
  </instances>
  <count>1</count>
  <solution>&lt;p&gt;Review the source code of this page. Implement custom error pages. Consider implementing a mechanism to provide a unique error reference/identifier to the client (browser) while logging the details on the server side and not exposing them to the user.&lt;/p&gt;</solution>
  <reference>&lt;p&gt;&lt;/p&gt;</reference>
  <cweid>200</cweid>
  <wascid>13</wascid>
  <sourceid>3</sourceid>
</alertitem>
<alertitem>
   <pluginid>10023</pluginid>
   <alert>Information Disclosure - Debug Error Messages</alert>
   <name>Information Disclosure - Debug Error Messages</name>
   <riskcode>1</riskcode>
   <confidence>2</confidence>
   <riskdesc>Low (Medium)</riskdesc>
   <desc>&lt;p&gt;The response appeared to contain common error messages returned by platforms such as ASP.NET, and Web-servers such as IIS and Apache. You can configure the list of common debug messages.&lt;/p&gt;</desc>
   <instances>
   <instance>
   <uri>https://ia-case-api-aat.service.core-compute-aat.internal/v2/api-docs</uri>
   <method>GET</method>
   <evidence>Internal Server Error</evidence>
   </instance>
   </instances>
   <count>1</count>
   <solution>&lt;p&gt;Disable debugging messages before pushing to production.&lt;/p&gt;</solution>
   <reference>&lt;p&gt;&lt;/p&gt;</reference>
   <cweid>200</cweid>
   <wascid>13</wascid>
   <sourceid>3</sourceid>
 </alertitem>
</alerts></site></OWASPZAPReport>