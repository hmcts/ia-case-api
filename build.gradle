buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath("org.yaml:snakeyaml:1.23")
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.0.11")
    }
}

plugins {
    id 'application'
    id 'checkstyle'
    id 'jacoco'
    id 'pmd'
    id 'com.github.ben-manes.versions' version '0.20.0'
    id "info.solidsoft.pitest" version '1.5.1'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.flywaydb.flyway' version '5.2.4'
    id 'org.owasp.dependencycheck' version '5.1.0'
    id 'org.sonarqube' version '3.0'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
    id 'au.com.dius.pact' version '3.5.24'
    id "io.freefair.lombok" version "5.1.0"
}

apply plugin: 'java'
apply plugin: 'net.serenity-bdd.aggregator'
apply plugin: 'project-report'
apply plugin: 'idea'

def versions = [
    gradlePitest       : '1.5.1',
    pitest             : '1.5.2',
    reformLogging      : '5.1.1-BETA',
    reformHealthStarter: '0.0.5',
    serenity           : '2.2.12',
    sonarPitest        : '0.5',
    springBoot         : '2.2.4.RELEASE',
    springHystrix      : '2.1.1.RELEASE',
    springfoxSwagger   : '2.9.2',
    pact_version       : '3.5.24'

]

mainClassName = 'uk.gov.hmcts.reform.iacaseapi.Application'
def jarName = 'ia-case-api.jar'

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 11
targetCompatibility = 11

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation' << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

sourceSets {

    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    functionalTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }

    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contactTest/resources')
    }
}

idea {
    module {
        testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
        testResourceDirs += project.sourceSets.integrationTest.resources.srcDirs
        testSourceDirs += project.sourceSets.functionalTest.java.srcDirs
        testResourceDirs += project.sourceSets.functionalTest.resources.srcDirs
        testSourceDirs += project.sourceSets.smokeTest.java.srcDirs
        testResourceDirs += project.sourceSets.smokeTest.resources.srcDirs
        testSourceDirs += project.sourceSets.contractTest.java.srcDirs
        testResourceDirs += project.sourceSets.contractTest.resources.srcDirs
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestCompile.extendsFrom testCompile
    functionalTestRuntime.extendsFrom testRuntime
    contractTestCompile.extendsFrom testCompile
    contractTestRuntime.extendsFrom testRuntime
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.29'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
}

pmd {
    toolVersion = '6.12.0'
    ignoreFailures = true
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.integrationTest, sourceSets.functionalTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    ruleSets = [
        'category/java/errorprone.xml',
        'category/java/bestpractices.xml'
    ]
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {

    systemProperty "scenario", System.getProperty('scenario')

    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    finalizedBy aggregate
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
    testClassesDirs = sourceSets.smokeTest.output.classesDirs
    classpath = sourceSets.smokeTest.runtimeClasspath
}

task contract(type: Test, description: 'Runs the pact contract tests.', group: 'Verification') {
    description = "Runs the consumer Pact tests"
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.enabled = true
        csv.enabled = false
        xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

pitest {
    targetClasses = ['uk.gov.hmcts.reform.iacaseapi.*']
    excludedClasses = [
        'uk.gov.hmcts.reform.iacaseapi.infrastructure.config.*',
        'uk.gov.hmcts.reform.iacaseapi.Application'
    ]
    threads = 10
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
    mutationThreshold = 90
}

project.tasks['pitest'].group = "Verification"

sonarqube {
    properties {
        property "sonar.projectName", "IA :: Immigration & Asylum case api"
        property "sonar.projectKey", "IACASEAPI"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
        property "sonar.exclusions", "src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/config/**," +
                                     "src/main/java/uk/gov/hmcts/reform/iacaseapi/infrastructure/SystemDateProvider.java," +
                                     "src/main/java/uk/gov/hmcts/reform/iacaseapi/Application.java"
    }
}

project.tasks['sonarqube'].dependsOn test, integration, jacocoTestReport
project.tasks['sonarqube'].group = "Verification"

repositories {

    maven {
        url "https://dl.bintray.com/hmcts/hmcts-maven"
    }

    jcenter()
}

dependencyManagement {
    dependencies {
        // CVE-2019-0232, CVE-2019-0199 - command line injections on windows
        //CVE-2020-13934
        dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.37') {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-el'
            entry 'tomcat-embed-websocket'
        }

        // CVE-2019-10086
        dependencySet(group: 'commons-beanutils', version: '1.9.4') {
            entry 'commons-beanutils'
        }
    }
}

dependencies {

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-json', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: versions.springHystrix
    compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.1.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: versions.springBoot

    compile group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.5.6'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.2'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.2'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.11.2'
    compile group: 'io.github.openfeign.form', name: 'feign-form', version: '3.4.0'
    compile group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.4.0'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger
    compile group: 'org.flywaydb', name: 'flyway-core', version: '5.2.4'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.13'
    compile group: 'com.sun.xml.bind', name: 'jaxb-osgi', version: '2.3.3'

    compile group: 'uk.gov.hmcts.reform', name: 'logging-spring', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-httpcomponents', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'
    compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: versions.reformHealthStarter

    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.0.0'
    compile(group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.4')

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.12.0-RELEASE'

    compile group: 'com.google.guava', name: 'guava', version: '27.0-jre'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.23'

    compile group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '4.12.1'

    testCompile("org.hamcrest:hamcrest-junit:2.0.0.0") {
        exclude group: "org.hamcrest", module: "hamcrest-core"
        exclude group: "org.hamcrest", module: "hamcrest-library"
    }

    testCompile group: 'com.h2database', name: 'h2', version: '1.4.197'
    testCompile group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'
    testCompile "com.github.tomakehurst:wiremock:2.19.0"
    testCompile group: 'org.mockito', name: 'mockito-core', version: '3.5.0'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.7'
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot

    testCompile group: 'org.pitest', name: 'pitest', version: versions.pitest
    testCompile 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.3.0'
    testCompile 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

    testCompile group: 'io.rest-assured', name: 'rest-assured-all', version: '4.3.1'
    testCompile group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    testCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    testCompile group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    testCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    testCompile "com.github.tomakehurst:wiremock-jre8:2.23.2"

    testCompile 'pl.pragmatists:JUnitParams:1.1.1'

//    testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.3.2'
    testCompile "org.junit.jupiter:junit-jupiter-api:5.6.2"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.6.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.2"


    //pact contract testing
    contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-junit5_2.12', version: versions.pact_version
    contractTestCompile group: 'au.com.dius', name: 'pact-jvm-consumer-java8_2.12', version: versions.pact_version

    contractTestCompile("org.junit.jupiter:junit-jupiter-api:5.6.2")
    contractTestRuntime("org.junit.jupiter:junit-jupiter-engine:5.6.2")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.6.2')

    testCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.26') {
        force = true
    }

    integrationTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.26') {
        force = true
    }

    functionalTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.26') {
        force = true
    }

    contractTestCompile(group: 'org.yaml', name: 'snakeyaml', version: '1.26') {
        force = true
    }

    integrationTestCompile sourceSets.main.runtimeClasspath
    integrationTestCompile sourceSets.test.runtimeClasspath

    functionalTestCompile sourceSets.main.runtimeClasspath
    functionalTestCompile sourceSets.test.runtimeClasspath

    smokeTestCompile sourceSets.main.runtimeClasspath
    smokeTestCompile sourceSets.test.runtimeClasspath

    contractTestCompile sourceSets.main.runtimeClasspath
    contractTestCompile sourceSets.test.runtimeClasspath

}



pact {
    publish {
        pactDirectory = 'target/pacts'
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        version = project.pactVersion
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'
    // excludes *Test* source configurations from scan
    skipConfigurations = configurations.collect { it.name }.findAll { it.contains('Test') }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

gradle.startParameter.continueOnFailure = true

bootJar {
    archiveName = jarName
    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

// this is required to force Java running on the Azure Windows Server OS into using
// UTF-8 as the default character set instead of windows-1252 which causes issues.
// this setting only applies when running via gradle bootRun -- see web.config for the
// java flag that configures the deployed appllications
applicationDefaultJvmArgs = ["-Dfile.encoding=UTF-8"]

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
